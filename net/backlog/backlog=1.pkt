--bind_port=8848

0 socket(AF_INET, SOCK_STREAM, 0) = 3
+0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
+0 bind(3, ..., ...) = 0
// backlog设为1
+0 listen(3, 1) = 0

// 设置有5个client跟server握手
+.1 < 9991>8848 S 0:0(0) win 1000
+.1 < 9992>8848 S 0:0(0) win 1000
+.1 < 9993>8848 S 0:0(0) win 1000
+.1 < 9994>8848 S 0:0(0) win 1000
+.1 < 9995>8848 S 0:0(0) win 1000


// tcpdump的一些输出
// 可以看出，server都给出了第二次握手，唯独最早的9991存在重试握手
// 16:32:03.370546 tun0  In  IP 192.0.2.1.9991 > 192.168.108.45.8848: Flags [S], seq 0, win 1000, length 0
// 16:32:03.370607 tun0  Out IP 192.168.108.45.8848 > 192.0.2.1.9991: Flags [S.], seq 2417053888, ack 1, win 64240, options [mss 1460], length 0
// 16:32:03.468709 tun0  In  IP 192.0.2.1.9992 > 192.168.108.45.8848: Flags [S], seq 0, win 1000, length 0
// 16:32:03.468786 tun0  Out IP 192.168.108.45.8848 > 192.0.2.1.9992: Flags [S.], seq 2959693250, ack 1, win 64240, options [mss 1460], length 0
// 16:32:03.568339 tun0  In  IP 192.0.2.1.9993 > 192.168.108.45.8848: Flags [S], seq 0, win 1000, length 0
// 16:32:03.568367 tun0  Out IP 192.168.108.45.8848 > 192.0.2.1.9993: Flags [S.], seq 73263118, ack 1, win 64240, options [mss 1460], length 0
// 16:32:03.670731 tun0  In  IP 192.0.2.1.9994 > 192.168.108.45.8848: Flags [S], seq 0, win 1000, length 0
// 16:32:03.670773 tun0  Out IP 192.168.108.45.8848 > 192.0.2.1.9994: Flags [S.], seq 2538559182, ack 1, win 64240, options [mss 1460], length 0
// 16:32:03.772050 tun0  In  IP 192.0.2.1.9995 > 192.168.108.45.8848: Flags [S], seq 0, win 1000, length 0
// 16:32:03.772102 tun0  Out IP 192.168.108.45.8848 > 192.0.2.1.9995: Flags [S.], seq 495130115, ack 1, win 64240, options [mss 1460], length 0
// 16:32:04.441265 tun0  Out IP 192.168.108.45.8848 > 192.0.2.1.9991: Flags [S.], seq 2417053888, ack 1, win 64240, options [mss 1460], length 0
// 16:32:06.517588 tun0  Out IP 192.168.108.45.8848 > 192.0.2.1.9991: Flags [S.], seq 2417053888, ack 1, win 64240, options [mss 1460], length 0
// 16:32:10.602864 tun0  Out IP 192.168.108.45.8848 > 192.0.2.1.9991: Flags [S.], seq 2417053888, ack 1, win 64240, options [mss 1460], length 0

// 在这里可以通过netstat看出只有9991是存在RECV关系，其它的客户端早已忘记
// tcp        0      0 192.168.146.218:8848    192.0.2.1:9991          SYN_RECV

// 但是如果再跟一个忘记的client继续握手会怎样？
+1 < 9994>8848 . 1:1(0) ack 1 win 1000

// 注：这是第二次测试，跟前面的tcpdump不连续
// 基本上就是前面重试前插入前两条，后续接着重试9991握手
// 可以看出，server已经忘记了9994，直接抛出RST
// 16:38:43.894319 tun0  In  IP 192.0.2.1.9994 > 192.168.122.90.8848: Flags [.], ack 405264024, win 1000, length 0
// 16:38:43.894341 tun0  Out IP 192.168.122.90.8848 > 192.0.2.1.9994: Flags [R], seq 1, win 0, length 0
//
// 16:38:49.691350 tun0  Out IP 192.168.122.90.8848 > 192.0.2.1.9991: Flags [S.], seq 2329322482, ack 1, win 64240, options [mss 1460], length 0
// 16:38:57.135448 tun0  Out IP 192.168.122.90.8848 > 192.0.2.1.9991: Flags [S.], seq 2329322482, ack 1, win 64240, options [mss 1460], length 0
// 16:39:13.773886 tun0  Out IP 192.168.122.90.8848 > 192.0.2.1.9991: Flags [S.], seq 2329322482, ack 1, win 64240, options [mss 1460], length 0

// netstat显示，server仍然只挂念着最早的9991
// tcp        0      0 192.168.122.90:8848     192.0.2.1:9991          SYN_RECV

// 方便调试用
+0 `sleep 1000000`
